"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/typeit-react";
exports.ids = ["vendor-chunks/typeit-react"];
exports.modules = {

/***/ "(ssr)/./node_modules/typeit-react/dist/index.es.js":
/*!****************************************************!*\
  !*** ./node_modules/typeit-react/dist/index.es.js ***!
  \****************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ TypeIt)\n/* harmony export */ });\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react */ \"(ssr)/./node_modules/next/dist/server/future/route-modules/app-page/vendored/ssr/react.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_0___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__);\nvar __defProp = Object.defineProperty;\nvar __typeError = (msg) => {\n  throw TypeError(msg);\n};\nvar __defNormalProp = (obj, key, value) => key in obj ? __defProp(obj, key, { enumerable: true, configurable: true, writable: true, value }) : obj[key] = value;\nvar __publicField = (obj, key, value) => __defNormalProp(obj, typeof key !== \"symbol\" ? key + \"\" : key, value);\nvar __accessCheck = (obj, member, msg) => member.has(obj) || __typeError(\"Cannot \" + msg);\nvar __privateGet = (obj, member, getter) => (__accessCheck(obj, member, \"read from private field\"), getter ? getter.call(obj) : member.get(obj));\nvar __privateAdd = (obj, member, value) => member.has(obj) ? __typeError(\"Cannot add the same private member more than once\") : member instanceof WeakSet ? member.add(obj) : member.set(obj, value);\nvar __privateMethod = (obj, member, method) => (__accessCheck(obj, member, \"access private method\"), method);\nvar _TypeIt_instances, empty_fn, fire_fn, move_fn, prepLoop_fn, fireItemWithContext_fn, wait_fn, attachCursor_fn, elementIsInput_fn, queueAndReturn_fn, maybeAppendPause_fn, generateTemporaryOptionQueueItems_fn, updateOptions_fn, generateQueue_fn, _buildOptions, prependHardcodedStrings_fn, setUpCursor_fn, addSplitPause_fn, type_fn, delete_fn, removeNode_fn, getPace_fn, derivedCursorPosition_get, isInput_get, shouldRenderCursor_get, allChars_get, _a;\n\nconst isArray = (thing) => Array.isArray(thing);\nconst asArray = (value) => isArray(value) ? value : [value];\nlet Queue = function(initialItems) {\n  let add = function(steps) {\n    asArray(steps).forEach((step) => {\n      var _a2;\n      return _q.set(Symbol((_a2 = step.char) == null ? void 0 : _a2.innerText), buildQueueItem({ ...step }));\n    });\n    return this;\n  };\n  let getTypeable = () => rawValues().filter((value) => value.typeable);\n  let set = function(index, item) {\n    let keys = [..._q.keys()];\n    _q.set(keys[index], buildQueueItem(item));\n  };\n  let buildQueueItem = (queueItem) => {\n    queueItem.shouldPauseCursor = function() {\n      return Boolean(this.typeable || this.cursorable || this.deletable);\n    };\n    return queueItem;\n  };\n  let reset = function() {\n    _q.forEach((item) => delete item.done);\n  };\n  let wipe = function() {\n    _q = /* @__PURE__ */ new Map();\n    add(initialItems);\n  };\n  let getQueue = () => _q;\n  let rawValues = () => Array.from(_q.values());\n  let destroy = (key) => _q.delete(key);\n  let getItems = (all = false) => all ? rawValues() : rawValues().filter((i) => !i.done);\n  let done = (key, shouldDestroy = false) => shouldDestroy ? _q.delete(key) : _q.get(key).done = true;\n  let _q = /* @__PURE__ */ new Map();\n  add(initialItems);\n  return {\n    add,\n    set,\n    wipe,\n    done,\n    reset,\n    destroy,\n    getItems,\n    getQueue,\n    getTypeable\n  };\n};\nconst DATA_ATTRIBUTE = \"data-typeit-id\";\nconst CURSOR_CLASS = \"ti-cursor\";\nconst END = \"END\";\nconst DEFAULT_STATUSES = {\n  started: false,\n  completed: false,\n  frozen: false,\n  destroyed: false\n};\nconst DEFAULT_OPTIONS = {\n  breakLines: true,\n  cursor: {\n    autoPause: true,\n    autoPauseDelay: 500,\n    animation: {\n      frames: [0, 0, 1].map((n) => {\n        return { opacity: n };\n      }),\n      options: {\n        iterations: Infinity,\n        easing: \"steps(2, start)\",\n        fill: \"forwards\"\n      }\n    }\n  },\n  cursorChar: \"|\",\n  cursorSpeed: 1e3,\n  deleteSpeed: null,\n  html: true,\n  lifeLike: true,\n  loop: false,\n  loopDelay: 750,\n  nextStringDelay: 750,\n  speed: 100,\n  startDelay: 250,\n  startDelete: false,\n  strings: [],\n  waitUntilVisible: false,\n  beforeString: () => {\n  },\n  afterString: () => {\n  },\n  beforeStep: () => {\n  },\n  afterStep: () => {\n  },\n  afterComplete: () => {\n  }\n};\nconst PLACEHOLDER_CSS = `[${DATA_ATTRIBUTE}]:before {content: '.'; display: inline-block; width: 0; visibility: hidden;}`;\nconst createElement = (el) => document.createElement(el);\nconst createTextNode = (content) => document.createTextNode(content);\nconst appendStyleBlock = (styles, id = \"\") => {\n  let styleBlock = createElement(\"style\");\n  styleBlock.id = id;\n  styleBlock.appendChild(createTextNode(styles));\n  document.head.appendChild(styleBlock);\n};\nconst calculateDelay = (delayArg) => {\n  if (!isArray(delayArg)) {\n    delayArg = [delayArg / 2, delayArg / 2];\n  }\n  return delayArg;\n};\nconst randomInRange = (value, range2) => {\n  return Math.abs(\n    Math.random() * (value + range2 - (value - range2)) + (value - range2)\n  );\n};\nlet range = (val) => val / 2;\nfunction calculatePace(options) {\n  let { speed, deleteSpeed, lifeLike } = options;\n  deleteSpeed = deleteSpeed !== null ? deleteSpeed : speed / 3;\n  return lifeLike ? [\n    randomInRange(speed, range(speed)),\n    randomInRange(deleteSpeed, range(deleteSpeed))\n  ] : [speed, deleteSpeed];\n}\nconst toArray = (val) => Array.from(val);\nlet expandTextNodes = (element) => {\n  [...element.childNodes].forEach((child) => {\n    if (child.nodeValue) {\n      [...child.nodeValue].forEach((c) => {\n        child.parentNode.insertBefore(createTextNode(c), child);\n      });\n      child.remove();\n      return;\n    }\n    expandTextNodes(child);\n  });\n  return element;\n};\nconst getParsedBody = (content) => {\n  let doc = document.implementation.createHTMLDocument();\n  doc.body.innerHTML = content;\n  return expandTextNodes(doc.body);\n};\nfunction walkElementNodes(element, shouldReverse = false, shouldIncludeCursor = false) {\n  let cursor = element.querySelector(`.${CURSOR_CLASS}`);\n  let walker = document.createTreeWalker(element, NodeFilter.SHOW_ALL, {\n    acceptNode: (node) => {\n      var _a2, _b;\n      if (cursor && shouldIncludeCursor) {\n        if ((_a2 = node.classList) == null ? void 0 : _a2.contains(CURSOR_CLASS)) {\n          return NodeFilter.FILTER_ACCEPT;\n        }\n        if (cursor.contains(node)) {\n          return NodeFilter.FILTER_REJECT;\n        }\n      }\n      return ((_b = node.classList) == null ? void 0 : _b.contains(CURSOR_CLASS)) ? NodeFilter.FILTER_REJECT : NodeFilter.FILTER_ACCEPT;\n    }\n  });\n  let nextNode;\n  let nodes = [];\n  while (nextNode = walker.nextNode()) {\n    if (!nextNode.originalParent) {\n      nextNode.originalParent = nextNode.parentNode;\n    }\n    nodes.push(nextNode);\n  }\n  return shouldReverse ? nodes.reverse() : nodes;\n}\nfunction chunkStringAsHtml(string) {\n  return walkElementNodes(getParsedBody(string));\n}\nfunction maybeChunkStringAsHtml(str, asHtml = true) {\n  return asHtml ? chunkStringAsHtml(str) : toArray(str).map(createTextNode);\n}\nconst cleanUpSkipped = ({\n  index,\n  newIndex,\n  queueItems,\n  cleanUp\n}) => {\n  for (let i = index + 1; i < newIndex + 1; i++) {\n    cleanUp(queueItems[i][0]);\n  }\n};\nconst isNumber = (value) => Number.isInteger(value);\nconst countStepsToSelector = ({\n  queueItems,\n  selector,\n  cursorPosition,\n  to\n}) => {\n  if (isNumber(selector)) {\n    return selector * -1;\n  }\n  let isMovingToEnd = new RegExp(END, \"i\").test(to);\n  let selectorIndex = selector ? [...queueItems].reverse().findIndex(({ char }) => {\n    let parentElement = char.parentElement;\n    let parentMatches = parentElement.matches(selector);\n    if (isMovingToEnd && parentMatches) {\n      return true;\n    }\n    return parentMatches && parentElement.firstChild.isSameNode(char);\n  }) : -1;\n  if (selectorIndex < 0) {\n    selectorIndex = isMovingToEnd ? 0 : queueItems.length - 1;\n  }\n  let offset = isMovingToEnd ? 0 : 1;\n  return selectorIndex - cursorPosition + offset;\n};\nconst destroyTimeouts = (timeouts) => {\n  timeouts.forEach(clearTimeout);\n  return [];\n};\nconst duplicate = (value, times) => new Array(times).fill(value);\nlet beforePaint = (cb) => {\n  return new Promise((resolve) => {\n    requestAnimationFrame(async () => {\n      resolve(await cb());\n    });\n  });\n};\nlet getAnimationFromElement = (element) => {\n  return element == null ? void 0 : element.getAnimations().find((animation) => {\n    return animation.id === element.dataset.tiAnimationId;\n  });\n};\nlet setCursorAnimation = ({\n  cursor,\n  frames,\n  options\n}) => {\n  let animation = cursor.animate(frames, options);\n  animation.pause();\n  animation.id = cursor.dataset.tiAnimationId;\n  beforePaint(() => {\n    beforePaint(() => {\n      animation.play();\n    });\n  });\n  return animation;\n};\nlet rebuildCursorAnimation = ({\n  cursor,\n  options,\n  cursorOptions\n}) => {\n  if (!cursor || !cursorOptions) return;\n  let animation = getAnimationFromElement(cursor);\n  let oldCurrentTime;\n  if (animation) {\n    options.delay = animation.effect.getComputedTiming().delay;\n    oldCurrentTime = animation.currentTime;\n    animation.cancel();\n  }\n  let newAnimation = setCursorAnimation({\n    cursor,\n    frames: cursorOptions.animation.frames,\n    options\n  });\n  if (oldCurrentTime) {\n    newAnimation.currentTime = oldCurrentTime;\n  }\n  return newAnimation;\n};\nlet execute = (queueItem) => {\n  var _a2;\n  return (_a2 = queueItem.func) == null ? void 0 : _a2.call(null);\n};\nlet fireItem = async ({\n  index,\n  queueItems,\n  wait: wait2,\n  cursor,\n  cursorOptions\n}) => {\n  let queueItem = queueItems[index][1];\n  let instantQueue = [];\n  let tempIndex = index;\n  let futureItem = queueItem;\n  let shouldBeGrouped = () => futureItem && !futureItem.delay;\n  let shouldPauseCursor = queueItem.shouldPauseCursor() && cursorOptions.autoPause;\n  while (shouldBeGrouped()) {\n    instantQueue.push(futureItem);\n    shouldBeGrouped() && tempIndex++;\n    futureItem = queueItems[tempIndex] ? queueItems[tempIndex][1] : null;\n  }\n  if (instantQueue.length) {\n    await beforePaint(async () => {\n      for (let q of instantQueue) {\n        await execute(q);\n      }\n    });\n    return tempIndex - 1;\n  }\n  let animation = getAnimationFromElement(cursor);\n  let options;\n  if (animation) {\n    options = {\n      ...animation.effect.getComputedTiming(),\n      delay: shouldPauseCursor ? cursorOptions.autoPauseDelay : 0\n    };\n  }\n  await wait2(async () => {\n    if (animation && shouldPauseCursor) {\n      animation.cancel();\n    }\n    await beforePaint(() => {\n      execute(queueItem);\n    });\n  }, queueItem.delay);\n  await rebuildCursorAnimation({\n    cursor,\n    options,\n    cursorOptions\n  });\n  return index;\n};\nconst fireWhenVisible = (element, func) => {\n  let observer = new IntersectionObserver(\n    (entries, observer2) => {\n      entries.forEach((entry) => {\n        if (entry.isIntersecting) {\n          func();\n          observer2.unobserve(element);\n        }\n      });\n    },\n    { threshold: 1 }\n  );\n  observer.observe(element);\n};\nconst generateHash = () => Math.random().toString().substring(2, 9);\nconst isInput = (el) => {\n  return \"value\" in el;\n};\nlet getAllChars = (element) => {\n  if (isInput(element)) {\n    return toArray(element.value);\n  }\n  return walkElementNodes(element, true).filter(\n    (c) => !(c.childNodes.length > 0)\n  );\n};\nlet handleFunctionalArg = (arg) => {\n  return typeof arg === \"function\" ? arg() : arg;\n};\nlet select = (selector, element = document, all = false) => {\n  return element[`querySelector${all ? \"All\" : \"\"}`](selector);\n};\nlet isBodyElement = (node) => /body/i.test(node == null ? void 0 : node.tagName);\nlet insertIntoElement = (originalTarget, character) => {\n  if (isInput(originalTarget)) {\n    originalTarget.value = `${originalTarget.value}${character.textContent}`;\n    return;\n  }\n  character.innerHTML = \"\";\n  let target = isBodyElement(character.originalParent) ? originalTarget : (\n    // If we add one-off fresh elements, there will be no\n    // \"originalParent\", so always fall back to the default target.\n    character.originalParent || originalTarget\n  );\n  target.insertBefore(\n    character,\n    select(\".\" + CURSOR_CLASS, target) || null\n  );\n};\nconst isNonVoidElement = (el) => /<(.+)>(.*?)<\\/(.+)>/.test(el.outerHTML);\nconst merge = (originalObj, newObj) => Object.assign({}, originalObj, newObj);\nlet processCursorOptions = (cursorOptions) => {\n  var _a2, _b;\n  if (typeof cursorOptions === \"object\") {\n    let newOptions = {};\n    let { frames: defaultFrames, options: defaultOptions } = DEFAULT_OPTIONS.cursor.animation;\n    newOptions.animation = cursorOptions.animation || {};\n    newOptions.animation.frames = ((_a2 = cursorOptions.animation) == null ? void 0 : _a2.frames) || defaultFrames;\n    newOptions.animation.options = merge(\n      defaultOptions,\n      ((_b = cursorOptions.animation) == null ? void 0 : _b.options) || {}\n    );\n    newOptions.autoPause = cursorOptions.autoPause ?? DEFAULT_OPTIONS.cursor.autoPause;\n    newOptions.autoPauseDelay = cursorOptions.autoPauseDelay || DEFAULT_OPTIONS.cursor.autoPauseDelay;\n    return newOptions;\n  }\n  if (cursorOptions === true) {\n    return DEFAULT_OPTIONS.cursor;\n  }\n  return cursorOptions;\n};\nconst removeNode = (node, rootElement) => {\n  if (!node) return;\n  let nodeParent = node.parentNode;\n  let nodeToRemove = nodeParent.childNodes.length > 1 || nodeParent.isSameNode(rootElement) ? (\n    // This parent still needs to exist.\n    node\n  ) : (\n    // There's nothing else in there, so just delete the entire thing.\n    // By doing this, we clean up markup as we go along.\n    nodeParent\n  );\n  nodeToRemove.remove();\n};\nconst repositionCursor = (element, allChars, newCursorPosition) => {\n  let nodeToInsertBefore = allChars[newCursorPosition - 1];\n  let cursor = select(`.${CURSOR_CLASS}`, element);\n  element = (nodeToInsertBefore == null ? void 0 : nodeToInsertBefore.parentNode) || element;\n  element.insertBefore(cursor, nodeToInsertBefore || null);\n};\nfunction selectorToElement(thing) {\n  return typeof thing === \"string\" ? select(thing) : thing;\n}\nlet cursorFontStyles = {\n  \"font-family\": \"\",\n  \"font-weight\": \"\",\n  \"font-size\": \"\",\n  \"font-style\": \"\",\n  \"line-height\": \"\",\n  color: \"\",\n  transform: \"translateX(-.125em)\"\n};\nlet setCursorStyles = (id, element) => {\n  let rootSelector = `[${DATA_ATTRIBUTE}='${id}']`;\n  let cursorSelector = `${rootSelector} .${CURSOR_CLASS}`;\n  let computedStyles = getComputedStyle(element);\n  let customProperties = Object.entries(cursorFontStyles).reduce(\n    (accumulator, [item, value]) => {\n      return `${accumulator} ${item}: var(--ti-cursor-${item}, ${value || computedStyles[item]});`;\n    },\n    \"\"\n  );\n  appendStyleBlock(\n    `${cursorSelector} { display: inline-block; width: 0; ${customProperties} }`,\n    id\n  );\n};\nfunction splitOnBreak(str) {\n  return str.replace(/<!--(.+?)-->/g, \"\").trim().split(/<br(?:\\s*?)(?:\\/)?>/);\n}\nlet updateCursorPosition = (steps, cursorPosition, printedCharacters) => {\n  return Math.min(\n    Math.max(cursorPosition + steps, 0),\n    printedCharacters.length\n  );\n};\nlet wait = (callback, delay, timeouts) => {\n  return new Promise((resolve) => {\n    let cb = async () => {\n      await callback();\n      resolve();\n    };\n    timeouts.push(setTimeout(cb, delay || 0));\n  });\n};\nlet TypeIt$1 = (_a = class {\n  constructor(element, options = {}) {\n    __privateAdd(this, _TypeIt_instances);\n    __publicField(this, \"element\");\n    __publicField(this, \"timeouts\");\n    __publicField(this, \"cursorPosition\");\n    __publicField(this, \"predictedCursorPosition\");\n    __publicField(this, \"statuses\", {\n      started: false,\n      completed: false,\n      frozen: false,\n      destroyed: false\n    });\n    __publicField(this, \"opts\");\n    __publicField(this, \"id\");\n    __publicField(this, \"queue\");\n    __publicField(this, \"cursor\");\n    __publicField(this, \"unfreeze\", () => {\n    });\n    __publicField(this, \"is\", function(key) {\n      return this.statuses[key];\n    });\n    __privateAdd(this, _buildOptions, (options) => {\n      options.cursor = processCursorOptions(\n        options.cursor ?? DEFAULT_OPTIONS.cursor\n      );\n      this.opts.strings = __privateMethod(this, _TypeIt_instances, prependHardcodedStrings_fn).call(this, asArray(this.opts.strings));\n      this.opts = merge(this.opts, {\n        html: !__privateGet(this, _TypeIt_instances, isInput_get) && this.opts.html,\n        nextStringDelay: calculateDelay(this.opts.nextStringDelay),\n        loopDelay: calculateDelay(this.opts.loopDelay)\n      });\n    });\n    this.opts = merge(DEFAULT_OPTIONS, options);\n    this.element = selectorToElement(element);\n    this.timeouts = [];\n    this.cursorPosition = 0;\n    this.unfreeze = () => {\n    };\n    this.predictedCursorPosition = null;\n    this.statuses = merge({}, DEFAULT_STATUSES);\n    this.id = generateHash();\n    this.queue = Queue([{ delay: this.opts.startDelay }]);\n    __privateGet(this, _buildOptions).call(this, options);\n    this.cursor = __privateMethod(this, _TypeIt_instances, setUpCursor_fn).call(this);\n    this.element.dataset.typeitId = this.id;\n    appendStyleBlock(PLACEHOLDER_CSS);\n    if (this.opts.strings.length) {\n      __privateMethod(this, _TypeIt_instances, generateQueue_fn).call(this);\n    }\n  }\n  /**\n   * Can only be called once.\n   */\n  go() {\n    if (this.statuses.started) {\n      return this;\n    }\n    __privateMethod(this, _TypeIt_instances, attachCursor_fn).call(this);\n    if (!this.opts.waitUntilVisible) {\n      __privateMethod(this, _TypeIt_instances, fire_fn).call(this);\n      return this;\n    }\n    fireWhenVisible(this.element, __privateMethod(this, _TypeIt_instances, fire_fn).bind(this));\n    return this;\n  }\n  destroy(shouldRemoveCursor = true) {\n    this.timeouts = destroyTimeouts(this.timeouts);\n    handleFunctionalArg(shouldRemoveCursor) && this.cursor && __privateMethod(this, _TypeIt_instances, removeNode_fn).call(this, this.cursor);\n    this.statuses.destroyed = true;\n  }\n  reset(rebuild) {\n    !this.is(\"destroyed\") && this.destroy();\n    if (rebuild) {\n      this.queue.wipe();\n      rebuild(this);\n    } else {\n      this.queue.reset();\n    }\n    this.cursorPosition = 0;\n    for (let property in this.statuses) {\n      this.statuses[property] = false;\n    }\n    this.element[__privateMethod(this, _TypeIt_instances, elementIsInput_fn).call(this) ? \"value\" : \"innerHTML\"] = \"\";\n    return this;\n  }\n  type(string, actionOpts = {}) {\n    string = handleFunctionalArg(string);\n    let { instant } = actionOpts;\n    let bookEndQueueItems = __privateMethod(this, _TypeIt_instances, generateTemporaryOptionQueueItems_fn).call(this, actionOpts);\n    let chars = maybeChunkStringAsHtml(string, this.opts.html);\n    let charsAsQueueItems = chars.map((char) => {\n      return {\n        func: () => __privateMethod(this, _TypeIt_instances, type_fn).call(this, char),\n        char,\n        delay: instant || isNonVoidElement(char) ? 0 : __privateMethod(this, _TypeIt_instances, getPace_fn).call(this),\n        typeable: char.nodeType === Node.TEXT_NODE\n      };\n    });\n    let itemsToQueue = [\n      bookEndQueueItems[0],\n      { func: async () => await this.opts.beforeString(string, this) },\n      ...charsAsQueueItems,\n      { func: async () => await this.opts.afterString(string, this) },\n      bookEndQueueItems[1]\n    ];\n    return __privateMethod(this, _TypeIt_instances, queueAndReturn_fn).call(this, itemsToQueue, actionOpts);\n  }\n  break(actionOpts = {}) {\n    return __privateMethod(this, _TypeIt_instances, queueAndReturn_fn).call(this, {\n      func: () => __privateMethod(this, _TypeIt_instances, type_fn).call(this, createElement(\"BR\")),\n      typeable: true\n    }, actionOpts);\n  }\n  move(movementArg, actionOpts = {}) {\n    movementArg = handleFunctionalArg(movementArg);\n    let bookEndQueueItems = __privateMethod(this, _TypeIt_instances, generateTemporaryOptionQueueItems_fn).call(this, actionOpts);\n    let { instant, to } = actionOpts;\n    let numberOfSteps = countStepsToSelector({\n      queueItems: this.queue.getTypeable(),\n      selector: movementArg === null ? \"\" : movementArg,\n      to,\n      cursorPosition: __privateGet(this, _TypeIt_instances, derivedCursorPosition_get)\n    });\n    let directionalStep = numberOfSteps < 0 ? -1 : 1;\n    this.predictedCursorPosition = __privateGet(this, _TypeIt_instances, derivedCursorPosition_get) + numberOfSteps;\n    return __privateMethod(this, _TypeIt_instances, queueAndReturn_fn).call(this, [\n      bookEndQueueItems[0],\n      ...duplicate(\n        {\n          func: () => __privateMethod(this, _TypeIt_instances, move_fn).call(this, directionalStep),\n          delay: instant ? 0 : __privateMethod(this, _TypeIt_instances, getPace_fn).call(this),\n          cursorable: true\n        },\n        Math.abs(numberOfSteps)\n      ),\n      bookEndQueueItems[1]\n    ], actionOpts);\n  }\n  exec(func, actionOpts = {}) {\n    let bookEndQueueItems = __privateMethod(this, _TypeIt_instances, generateTemporaryOptionQueueItems_fn).call(this, actionOpts);\n    return __privateMethod(this, _TypeIt_instances, queueAndReturn_fn).call(this, [bookEndQueueItems[0], { func: () => func(this) }, bookEndQueueItems[1]], actionOpts);\n  }\n  options(opts, actionOpts = {}) {\n    opts = handleFunctionalArg(opts);\n    __privateMethod(this, _TypeIt_instances, updateOptions_fn).call(this, opts);\n    return __privateMethod(this, _TypeIt_instances, queueAndReturn_fn).call(this, {}, actionOpts);\n  }\n  pause(milliseconds, actionOpts = {}) {\n    return __privateMethod(this, _TypeIt_instances, queueAndReturn_fn).call(this, { delay: handleFunctionalArg(milliseconds) }, actionOpts);\n  }\n  delete(numCharacters = null, actionOpts = {}) {\n    numCharacters = handleFunctionalArg(numCharacters);\n    let bookEndQueueItems = __privateMethod(this, _TypeIt_instances, generateTemporaryOptionQueueItems_fn).call(this, actionOpts);\n    let num = numCharacters;\n    let { instant, to } = actionOpts;\n    let typeableQueueItems = this.queue.getTypeable();\n    let rounds = (() => {\n      if (num === null) {\n        return typeableQueueItems.length;\n      }\n      if (isNumber(num)) {\n        return num;\n      }\n      return countStepsToSelector({\n        queueItems: typeableQueueItems,\n        selector: num,\n        cursorPosition: __privateGet(this, _TypeIt_instances, derivedCursorPosition_get),\n        to\n      });\n    })();\n    return __privateMethod(this, _TypeIt_instances, queueAndReturn_fn).call(this, [\n      bookEndQueueItems[0],\n      ...duplicate(\n        {\n          func: __privateMethod(this, _TypeIt_instances, delete_fn).bind(this),\n          delay: instant ? 0 : __privateMethod(this, _TypeIt_instances, getPace_fn).call(this, 1),\n          deletable: true\n        },\n        rounds\n      ),\n      bookEndQueueItems[1]\n    ], actionOpts);\n  }\n  freeze() {\n    this.statuses.frozen = true;\n  }\n  /**\n   * Like `.go()`, but more... \"off the grid.\"\n   *\n   * - won't trigger `afterComplete` callback\n   * - items won't be replayed after `.reset()`\n   *\n   * When called, all non-done items will be \"flushed\" --\n   * that is, executed, but not remembered.\n   */\n  flush(cb = () => {\n  }) {\n    __privateMethod(this, _TypeIt_instances, attachCursor_fn).call(this);\n    __privateMethod(this, _TypeIt_instances, fire_fn).call(this, false).then(cb);\n    return this;\n  }\n  getQueue() {\n    return this.queue;\n  }\n  getOptions() {\n    return this.opts;\n  }\n  updateOptions(options) {\n    return __privateMethod(this, _TypeIt_instances, updateOptions_fn).call(this, options);\n  }\n  getElement() {\n    return this.element;\n  }\n  empty(actionOpts = {}) {\n    return __privateMethod(this, _TypeIt_instances, queueAndReturn_fn).call(this, { func: __privateMethod(this, _TypeIt_instances, empty_fn).bind(this) }, actionOpts);\n  }\n}, _TypeIt_instances = new WeakSet(), empty_fn = async function() {\n  if (__privateMethod(this, _TypeIt_instances, elementIsInput_fn).call(this)) {\n    this.element.value = \"\";\n    return;\n  }\n  __privateGet(this, _TypeIt_instances, allChars_get).forEach(__privateMethod(this, _TypeIt_instances, removeNode_fn).bind(this));\n  return;\n}, fire_fn = async function(remember = true) {\n  this.statuses.started = true;\n  let cleanUp = (qKey) => {\n    this.queue.done(qKey, !remember);\n  };\n  try {\n    let queueItems = [...this.queue.getQueue()];\n    for (let index = 0; index < queueItems.length; index++) {\n      let [queueKey, queueItem] = queueItems[index];\n      if (queueItem.done) continue;\n      if (!queueItem.deletable || queueItem.deletable && __privateGet(this, _TypeIt_instances, allChars_get).length) {\n        let newIndex = await __privateMethod(this, _TypeIt_instances, fireItemWithContext_fn).call(this, index, queueItems);\n        cleanUpSkipped({\n          index,\n          newIndex,\n          queueItems,\n          cleanUp\n        });\n        index = newIndex;\n      }\n      cleanUp(queueKey);\n    }\n    if (!remember) {\n      return this;\n    }\n    this.statuses.completed = true;\n    await this.opts.afterComplete(this);\n    if (!this.opts.loop) {\n      throw \"\";\n    }\n    let delay = this.opts.loopDelay;\n    __privateMethod(this, _TypeIt_instances, wait_fn).call(this, async () => {\n      await __privateMethod(this, _TypeIt_instances, prepLoop_fn).call(this, delay[0]);\n      __privateMethod(this, _TypeIt_instances, fire_fn).call(this);\n    }, delay[1]);\n  } catch (e) {\n  }\n  return this;\n}, move_fn = async function(step) {\n  this.cursorPosition = updateCursorPosition(\n    step,\n    this.cursorPosition,\n    __privateGet(this, _TypeIt_instances, allChars_get)\n  );\n  repositionCursor(this.element, __privateGet(this, _TypeIt_instances, allChars_get), this.cursorPosition);\n}, prepLoop_fn = async function(delay) {\n  let derivedCursorPosition = __privateGet(this, _TypeIt_instances, derivedCursorPosition_get);\n  derivedCursorPosition && await __privateMethod(this, _TypeIt_instances, move_fn).call(this, { value: derivedCursorPosition });\n  let queueItems = __privateGet(this, _TypeIt_instances, allChars_get).map((c) => {\n    return [\n      Symbol(),\n      {\n        func: __privateMethod(this, _TypeIt_instances, delete_fn).bind(this),\n        delay: __privateMethod(this, _TypeIt_instances, getPace_fn).call(this, 1),\n        deletable: true,\n        shouldPauseCursor: () => true\n      }\n    ];\n  });\n  for (let index = 0; index < queueItems.length; index++) {\n    await __privateMethod(this, _TypeIt_instances, fireItemWithContext_fn).call(this, index, queueItems);\n  }\n  this.queue.reset();\n  this.queue.set(0, { delay });\n}, fireItemWithContext_fn = function(index, queueItems) {\n  return fireItem({\n    index,\n    queueItems,\n    wait: __privateMethod(this, _TypeIt_instances, wait_fn).bind(this),\n    cursor: this.cursor,\n    cursorOptions: this.opts.cursor\n  });\n}, wait_fn = async function(callback, delay, silent = false) {\n  if (this.statuses.frozen) {\n    await new Promise((resolve) => {\n      this.unfreeze = () => {\n        this.statuses.frozen = false;\n        resolve();\n      };\n    });\n  }\n  silent || await this.opts.beforeStep(this);\n  await wait(callback, delay, this.timeouts);\n  silent || await this.opts.afterStep(this);\n}, attachCursor_fn = async function() {\n  !__privateMethod(this, _TypeIt_instances, elementIsInput_fn).call(this) && this.cursor && this.element.appendChild(this.cursor);\n  if (__privateGet(this, _TypeIt_instances, shouldRenderCursor_get)) {\n    setCursorStyles(this.id, this.element);\n    this.cursor.dataset.tiAnimationId = this.id;\n    let { animation } = this.opts.cursor;\n    let { frames, options } = animation;\n    setCursorAnimation({\n      frames,\n      cursor: this.cursor,\n      options: {\n        duration: this.opts.cursorSpeed,\n        ...options\n      }\n    });\n  }\n}, elementIsInput_fn = function() {\n  return isInput(this.element);\n}, queueAndReturn_fn = function(steps, opts) {\n  this.queue.add(steps);\n  __privateMethod(this, _TypeIt_instances, maybeAppendPause_fn).call(this, opts);\n  return this;\n}, maybeAppendPause_fn = function(opts = {}) {\n  let delay = opts.delay;\n  delay && this.queue.add({ delay });\n}, generateTemporaryOptionQueueItems_fn = function(newOptions = {}) {\n  return [\n    { func: () => __privateMethod(this, _TypeIt_instances, updateOptions_fn).call(this, newOptions) },\n    { func: () => __privateMethod(this, _TypeIt_instances, updateOptions_fn).call(this, this.opts) }\n  ];\n}, updateOptions_fn = async function(opts) {\n  this.opts = merge(this.opts, opts);\n}, /**\n * Based on provided strings, generate a TypeIt queue\n * to be fired for each character in the string.\n */\ngenerateQueue_fn = function() {\n  let strings = this.opts.strings.filter((string) => !!string);\n  strings.forEach((string, index) => {\n    this.type(string);\n    if (index + 1 === strings.length) {\n      return;\n    }\n    let splitItems = this.opts.breakLines ? [{ func: () => __privateMethod(this, _TypeIt_instances, type_fn).call(this, createElement(\"BR\")), typeable: true }] : duplicate(\n      {\n        func: __privateMethod(this, _TypeIt_instances, delete_fn).bind(this),\n        delay: __privateMethod(this, _TypeIt_instances, getPace_fn).call(this, 1)\n      },\n      this.queue.getTypeable().length\n    );\n    __privateMethod(this, _TypeIt_instances, addSplitPause_fn).call(this, splitItems);\n  });\n}, _buildOptions = new WeakMap(), prependHardcodedStrings_fn = function(strings) {\n  let existingMarkup = this.element.innerHTML;\n  if (!existingMarkup) {\n    return strings;\n  }\n  this.element.innerHTML = \"\";\n  if (this.opts.startDelete) {\n    this.element.innerHTML = existingMarkup;\n    expandTextNodes(this.element);\n    __privateMethod(this, _TypeIt_instances, addSplitPause_fn).call(this, duplicate(\n      {\n        func: __privateMethod(this, _TypeIt_instances, delete_fn).bind(this),\n        delay: __privateMethod(this, _TypeIt_instances, getPace_fn).call(this, 1),\n        deletable: true\n      },\n      __privateGet(this, _TypeIt_instances, allChars_get).length\n    ));\n    return strings;\n  }\n  return splitOnBreak(existingMarkup).concat(strings);\n}, /**\n * Provided it's a non-form element and the options is provided,\n * set up the cursor element for the animation.\n */\nsetUpCursor_fn = function() {\n  if (__privateGet(this, _TypeIt_instances, isInput_get)) {\n    return null;\n  }\n  let cursor = createElement(\"span\");\n  cursor.className = CURSOR_CLASS;\n  if (!__privateGet(this, _TypeIt_instances, shouldRenderCursor_get)) {\n    cursor.style.visibility = \"hidden\";\n    return cursor;\n  }\n  cursor.innerHTML = getParsedBody(this.opts.cursorChar).innerHTML;\n  return cursor;\n}, addSplitPause_fn = function(items) {\n  let delay = this.opts.nextStringDelay;\n  this.queue.add([{ delay: delay[0] }, ...items, { delay: delay[1] }]);\n}, type_fn = function(char) {\n  insertIntoElement(this.element, char);\n}, delete_fn = function() {\n  if (!__privateGet(this, _TypeIt_instances, allChars_get).length) return;\n  if (__privateGet(this, _TypeIt_instances, isInput_get)) {\n    this.element.value = this.element.value.slice(0, -1);\n  } else {\n    __privateMethod(this, _TypeIt_instances, removeNode_fn).call(this, __privateGet(this, _TypeIt_instances, allChars_get)[this.cursorPosition]);\n  }\n}, removeNode_fn = function(node) {\n  removeNode(node, this.element);\n}, getPace_fn = function(index = 0) {\n  return calculatePace(this.opts)[index];\n}, derivedCursorPosition_get = function() {\n  return this.predictedCursorPosition ?? this.cursorPosition;\n}, isInput_get = function() {\n  return isInput(this.element);\n}, shouldRenderCursor_get = function() {\n  return !!this.opts.cursor && !__privateGet(this, _TypeIt_instances, isInput_get);\n}, allChars_get = function() {\n  return getAllChars(this.element);\n}, _a);\nconst DynamicElementComponent = (0,react__WEBPACK_IMPORTED_MODULE_0__.forwardRef)((props, ref) => {\n  const { as: As } = props;\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(As, { ref, ...props });\n});\nconst defaultPropOptions = {};\nconst TypeIt = ({\n  as = \"span\",\n  options = defaultPropOptions,\n  children = null,\n  getBeforeInit = (instance) => instance,\n  getAfterInit = (instance) => instance,\n  ...remainingProps\n}) => {\n  const elementRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const instanceRef = (0,react__WEBPACK_IMPORTED_MODULE_0__.useRef)(null);\n  const [shouldShowChildren, setShouldShowChildren] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(true);\n  const [instanceOptions, setInstanceOptions] = (0,react__WEBPACK_IMPORTED_MODULE_0__.useState)(null);\n  function calculateOptions() {\n    const optionsClone = Object.assign({}, options);\n    if (children && elementRef.current) {\n      optionsClone.strings = elementRef.current.innerHTML;\n    }\n    setInstanceOptions(optionsClone);\n  }\n  function generateNewInstance() {\n    instanceRef.current = new TypeIt$1(elementRef.current, instanceOptions);\n    instanceRef.current = getBeforeInit(instanceRef.current);\n    instanceRef.current.go();\n    instanceRef.current = getAfterInit(instanceRef.current);\n  }\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    calculateOptions();\n    setShouldShowChildren(false);\n  }, [options]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    var _a2;\n    if (!instanceOptions) return;\n    ((_a2 = instanceRef.current) == null ? void 0 : _a2.updateOptions(instanceOptions)) || generateNewInstance();\n  }, [instanceOptions]);\n  (0,react__WEBPACK_IMPORTED_MODULE_0__.useEffect)(() => {\n    return () => {\n      var _a2;\n      return (_a2 = instanceRef.current) == null ? void 0 : _a2.destroy();\n    };\n  }, []);\n  return /* @__PURE__ */ react__WEBPACK_IMPORTED_MODULE_0___default().createElement(\n    DynamicElementComponent,\n    {\n      ref: elementRef,\n      as,\n      children: shouldShowChildren ? children : null,\n      style: { opacity: shouldShowChildren ? 0 : 1 },\n      ...remainingProps\n    }\n  );\n};\n\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/typeit-react/dist/index.es.js\n");

/***/ })

};
;